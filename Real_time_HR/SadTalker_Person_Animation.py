import os
import glob
import subprocess
from argparse import ArgumentParser

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ FFmpeg
FFMPEG_PATH = r"E:\ffmpeg-7.1-full_build\bin"
os.environ["PATH"] += os.pathsep + FFMPEG_PATH

# –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
parser = ArgumentParser()
parser.add_argument("--image_path", type=str, required=False, help="Path to the source image")
args = parser.parse_args()

# –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
SOURCE_IMAGE_PATH = args.image_path if args.image_path else "speaker.jpg"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ CLI SadTalker
POSE_STYLE = 0  # –°—Ç–∏–ª—å –ø–æ–∑—ã (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
BATCH_SIZE = 2  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
SIZE = 256  # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
EXPRESSION_SCALE = 1.0  # –ú–∞—Å—à—Ç–∞–± –≤—ã—Ä–∞–∂–µ–Ω–∏—è
PREPROCESS = 'full'  # –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
STILL_MODE = True  # –†–µ–∂–∏–º –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ–≥–æ —Ç–µ–ª–∞
CHECKPOINT_DIR = 'SadTalker/checkpoints'  # –ü—É—Ç—å –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º —Ç–æ—á–∫–∞–º
VENV_PATH = 'SadTalker/venv/Scripts/activate.bat'  # –ü—É—Ç—å –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã (–¥–ª—è Windows)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å SadTalker
def process_audio_with_sadtalker(audio_path, image_path, output_video_path):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–∑–æ–≤–∞ inference.py —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã
    command = f'"{VENV_PATH}" && python SadTalker/inference.py ' \
              f'--driven_audio {audio_path} ' \
              f'--source_image {image_path} ' \
              f'--checkpoint_dir {CHECKPOINT_DIR} ' \
              f'--result_dir . ' \
              f'--pose_style {POSE_STYLE} ' \
              f'--batch_size {BATCH_SIZE} ' \
              f'--size {SIZE} ' \
              f'--expression_scale {EXPRESSION_SCALE} ' \
              f'--preprocess {PREPROCESS} ' \
              f'--still' if STILL_MODE else ''

    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø–æ–º–æ—â—å—é subprocess
    try:
        subprocess.run(command, check=True, shell=True)
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {audio_path}")
        print(e)


# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ MP4 ‚Üí WebM
def convert_mp4_to_webm(input_path, output_path):
    command = f'ffmpeg -i "{input_path}" -c:v libvpx-vp9 -b:v 1M -c:a libopus "{output_path}" -y'
    try:
        subprocess.run(command, check=True, shell=True)
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {output_path}")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {input_path}")
        print(e)


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ if __name__ == "__main__"
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    test_image_path = "speaker.jpg"  # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    test_audio_path = "audio.wav"    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∞—É–¥–∏–æ
    test_output_video_path = "test_output.mp4"  # –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ (–≤ –∫–æ—Ä–Ω–µ)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {test_image_path} –∏ –∞—É–¥–∏–æ: {test_audio_path}")
    process_audio_with_sadtalker(test_audio_path, test_image_path, test_output_video_path)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP4 –≤ WebM
    mp4_files = glob.glob("*.mp4")  # –ò—â–µ–º –≤—Å–µ MP4-—Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
    if not mp4_files:
        print("‚ö†Ô∏è –í –∫–æ—Ä–Ω–µ –Ω–µ—Ç MP4-—Ñ–∞–π–ª–æ–≤.")
    else:
        for mp4_file in mp4_files:
            webm_file = mp4_file.replace(".mp4", ".webm")
            print(f"üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {mp4_file} ‚Üí {webm_file}")
            convert_mp4_to_webm(mp4_file, webm_file)

    print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")